Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ipynbOpener = ipynbOpener;
exports.importNotebook = importNotebook;

/**
 * Reads the given notebook file and coverts it to a text editor format with
 * Hydrogen cell breakpoints. Optionally after opening the notebook, it will
 * also load the previous results and display them.
 *
 * @param {String} filename - Path of the file.
 * @param {Boolean} importResults - Decides whether to display previous results
 */

var _loadNotebook = _asyncToGenerator(function* (filename) {
  var importResults = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  var data = undefined;
  var nb = undefined;
  try {
    data = JSON.parse((yield readFileP(filename)));
    if (data.nbformat < 3) {
      atom.notifications.addError("Only notebook version 4 is fully supported");
      return;
    } else if (data.nbformat == 3) {
      atom.notifications.addWarning("Only notebook version 4 is fully supported");
    }
    nb = (0, _nteractCommutable.fromJS)(data);
  } catch (err) {
    if (err.name === "SyntaxError") {
      atom.notifications.addError("Error not a valid notebook", {
        detail: err.stack
      });
    } else {
      atom.notifications.addError("Error reading file", {
        detail: err
      });
    }
    return;
  }
  var editor = yield atom.workspace.open();
  var grammar = getGrammarForNotebook(nb);
  if (!grammar) return;
  atom.grammars.assignLanguageMode(editor, grammar.scopeName);
  var commentStartString = (0, _codeManager.getCommentStartString)(editor);
  if (!commentStartString) {
    atom.notifications.addError("No comment symbol defined in root scope");
    return;
  }
  var nbCells = [];
  var sources = [];
  var resultRows = [];
  var previousBreakpoint = -1;

  nb.cellOrder.forEach(function (value) {
    var cell = nb.cellMap.get(value).toJS();
    nbCells.push(cell);
    var hyCell = toHydrogenCodeBlock(cell, commentStartString + " ");
    resultRows.push(previousBreakpoint + hyCell.code.trim().split("\n").length);
    previousBreakpoint += hyCell.row;
    sources.push(hyCell.code);
  });
  editor.setText(sources.join(linesep));
  if (importResults) importNotebookResults(editor, nbCells, resultRows);
}

/**
 * Tries to determine the Atom Grammar of a notebook. Default is Python.
 *
 * @param {Notebook} nb - The Notebook to determine the Atom Grammar of.
 * @return {atom$Grammar} - The grammar of the notebook.
 */
);

exports._loadNotebook = _loadNotebook;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, "next"); var callThrow = step.bind(null, "throw"); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require("path");

var path = _interopRequireWildcard(_path);

var _fs = require("fs");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _util = require("util");

var _nteractCommutable = require("@nteract/commutable");

var _store = require("./store");

var _store2 = _interopRequireDefault(_store);

var _codeManager = require("./code-manager");

var _result = require("./result");

var dialog = require("electron").remote.dialog;

var readFileP = (0, _util.promisify)(_fs.readFile);
var linesep = process.platform === "win32" ? "\r\n" : "\n";

/**
 * Determines if the provided uri is a valid file for Hydrogen to import.
 * Then it loads the notebook.
 *
 * @param {String} uri - Uri of the file to open.
 */

function ipynbOpener(uri) {
  if (path.extname(uri).toLowerCase() === ".ipynb" && atom.config.get("Hydrogen.importNotebookURI") === true) {
    return _loadNotebook(uri, atom.config.get("Hydrogen.importNotebookResults"));
  }
}

/**
 * Determines if the provided event is trying to open
 * a valid file for Hydrogen to import.
 * Otherwise it will ask the user to chose
 * a valid file for Hydrogen to import.
 * Then it loads the notebook.
 *
 * @param {Event} event - Atom Event from clicking in a treeview.
 */

function importNotebook(event) {
  // Use selected filepath if called from tree-view context menu
  var filenameFromTreeView = _lodash2["default"].get(event, "target.dataset.path");
  if (filenameFromTreeView && path.extname(filenameFromTreeView) === ".ipynb") {
    return _loadNotebook(filenameFromTreeView, atom.config.get("Hydrogen.importNotebookResults"));
  }

  dialog.showOpenDialog({
    properties: ["openFile"],
    filters: [{ name: "Notebooks", extensions: ["ipynb"] }]
  }, function (filenames) {
    if (!filenames) {
      atom.notifications.addError("No filenames selected");
      return;
    }
    var filename = filenames[0];
    if (path.extname(filename) !== ".ipynb") {
      atom.notifications.addError("Selected file must have extension .ipynb");
      return;
    }

    _loadNotebook(filename, atom.config.get("Hydrogen.importNotebookResults"));
  });
}

function getGrammarForNotebook(nb) {
  var _nb$metadata$toJS = // Sometimes used in nbformat v3
  nb.metadata.toJS();

  var kernelspec = _nb$metadata$toJS.kernelspec;
  var // Offical nbformat v4
  language_info = _nb$metadata$toJS.language_info;
  var // Offical nbformat v4
  kernel_info = _nb$metadata$toJS.kernel_info;
  var // Sometimes used in nbformat v3
  language = _nb$metadata$toJS.language;

  var kernel = kernelspec ? kernelspec : kernel_info;
  var lang = language_info ? language_info : language ? { name: language } : null;

  if (!kernel && !lang) {
    atom.notifications.addWarning("No language metadata in notebook; assuming Python");
    return atom.grammars.grammarForScopeName("source.python");
  }

  var matchedGrammar = null;

  if (lang) {
    // lang.name should be required
    matchedGrammar = getGrammarForLanguageName(lang.name);
    if (matchedGrammar) return matchedGrammar;

    // lang.file_extension is not required, but if lang.name retrieves no match,
    // this is the next best thing.
    if (lang.file_extension) {
      matchedGrammar = getGrammarForFileExtension(lang.file_extension);
    }
    if (matchedGrammar) return matchedGrammar;
  }

  if (kernel) {
    // kernel.language is not required, but its often more accurate than name
    matchedGrammar = getGrammarForLanguageName(kernel.language);
    if (matchedGrammar) return matchedGrammar;

    // kernel.name should be required, but is often a kernel name, so its hard
    // to match effciently
    matchedGrammar = getGrammarForKernelspecName(kernel.name);
    if (matchedGrammar) return matchedGrammar;
  }

  atom.notifications.addWarning("Unable to determine correct language grammar");
  return atom.grammars.grammarForScopeName("source.python");
}

/**
 * Tries to find a matching Atom Grammar from a language name
 *
 * @param {String} name - The language name to find a grammar for.
 * @return {atom$Grammar} - The matching Atom Grammar.
 */
function getGrammarForLanguageName(name) {
  if (!name) return null;
  var formattedName = name.toLowerCase().replace(" ", "-");
  var scopeName = "source." + formattedName;
  var grammars = atom.grammars.getGrammars();
  for (var g of grammars) {
    if (g && (g.name && g.name.toLowerCase() == name.toLowerCase() || g.scopeName == scopeName)) return g;
  }
  return null;
}

/**
 * Tries to find a matching Atom Grammar from a file extensions
 *
 * @param {String} ext - The file extension to find a grammar for.
 * @return {atom$Grammar} - The matching Atom Grammar.
 */
function getGrammarForFileExtension(ext) {
  if (!ext) return null;
  ext = ext.startsWith(".") ? ext.slice(1) : ext;
  var grammars = atom.grammars.getGrammars();
  return _lodash2["default"].find(grammars, function (grammar) {
    return _lodash2["default"].includes(grammar.fileTypes, ext);
  });
}

/**
 * Tries to find a matching Atom Grammar from Kernelspec name
 *
 * @param {String} name - The Kernelspec name to find a grammar for.
 * @return {atom$Grammar} - The matching Atom Grammar.
 */
function getGrammarForKernelspecName(name) {
  // Check if there exists an Atom grammar named source.${name}
  var grammar = getGrammarForLanguageName(name);
  if (grammar) return grammar;

  // Otherwise attempt manual matching from kernelspec name to Atom scope
  var crosswalk = {
    python2: "source.python",
    python3: "source.python",
    bash: "source.shell",
    javascript: "source.js",
    ir: "source.r"
  };
  if (crosswalk[name]) {
    return atom.grammars.grammarForScopeName(crosswalk[name]);
  }
}

/**
 * Converts notebook cells to Hydrogen code blocks.
 *
 * @param {Cell} cell - Notebook cell to convert
 * @param {String} commentStartString - The comment syntax of the code language.
 * @return {Object} - A Hydrogen Code Block.
 */
function toHydrogenCodeBlock(cell, commentStartString) {
  var cellType = cell.cell_type === "markdown" ? "markdown" : "codecell";
  var cellHeader = getCellHeader(commentStartString, cellType);
  var source = cell.source;
  var cellLength = undefined;
  if (cellType === "markdown") {
    source = source.split("\n");
    source[0] = commentStartString + source[0];
    cellLength = source.length;
    source = source.join(linesep + commentStartString);
  } else {
    cellLength = source.split("\n").length;
  }
  return {
    cellType: cellType,
    code: cellHeader + linesep + source,
    row: cellLength + 1 };
}

/**
 * Creates a Hydrogen cell header
 *
 * @param {String} commentStartString - The comment syntax of the code language.
 * @param {String} keyword - The keyword relating to the cell type.
 * @return {String} - A Hydrogen Cell Header.
 */
// plus 1 for the header
function getCellHeader(commentStartString, keyword) {
  var marker = commentStartString + "%% ";
  return keyword ? marker + keyword : marker;
}

/**
 * Displays previous cell results inline of the provided editor.
 * nbCells and resultRows should be the same length.
 *
 * @param {atom$TextEditor} editor - The editor to display the results in.
 * @param {Array<Cell>} nbCells - The original notebook cells.
 * @param {Array<Number>} resultRows - The rows to display the results on.
 */
function importNotebookResults(editor, nbCells, resultRows) {
  if (nbCells.length != resultRows.length) return;
  var markers = _store2["default"].markersMapping.get(editor.id);
  markers = markers ? markers : _store2["default"].newMarkerStore(editor.id);
  var cellNumber = 0;
  for (var cell of nbCells) {
    var _row = resultRows[cellNumber];

    switch (cell.cell_type) {
      case "code":
        if (cell.outputs.length > 0) {
          (0, _result.importResult)({ editor: editor, markers: markers }, { outputs: cell.outputs, row: _row });
        }
        break;
      case "markdown":
        (0, _result.importResult)({ editor: editor, markers: markers }, { outputs: [(0, _result.convertMarkdownToOutput)(cell.source)], row: _row });
        break;
    }
    cellNumber++;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,